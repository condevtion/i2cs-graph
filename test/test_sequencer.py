""" Contains tests for time sequence creating functions of the sequencer submodule """

import unittest

from helper import gen_seq, distribute
from helper import SECOND, MINUTE, HOUR
from helper import UTC, PT

import i2cs_graph.sequencer

class TestTimeSequencers(unittest.TestCase):
    """ Tests for the time sequence creating functions """

    def test_make_time_sequence_15s(self):
        """ The 15s sequencer produces correct time buckets """

        # The time sequence starts at 0 seconds
        t, = zip(*gen_seq(8, (20089.0, 4*SECOND)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_15s, t, UTC
            )),
            (
                (
                    '2024-12-31 23:59:52.500000 +0000', '2025-01-01 00:00:07.500000 +0000',
                    '2025-01-01 00:00:00.000000 +0000',
                    [
                        '2025-01-01 00:00:00.000000 +0000',
                        '2025-01-01 00:00:04.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:00:07.500000 +0000', '2025-01-01 00:00:22.500000 +0000',
                    '2025-01-01 00:00:15.000000 +0000',
                    [
                        '2025-01-01 00:00:08.000000 +0000',
                        '2025-01-01 00:00:12.000000 +0000',
                        '2025-01-01 00:00:16.000000 +0000',
                        '2025-01-01 00:00:20.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:00:22.500000 +0000', '2025-01-01 00:00:37.500000 +0000',
                    '2025-01-01 00:00:30.000000 +0000',
                    [
                        '2025-01-01 00:00:24.000000 +0000',
                        '2025-01-01 00:00:28.000000 +0000',
                    ]
                ),
            ))

        # The time sequence starts closer to 15 seconds than 0 (at 8)
        t, = zip(*gen_seq(8, (20089.0 + 8*SECOND, 4*SECOND)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_15s, t, UTC
            )),
            (
                (
                    '2025-01-01 00:00:07.500000 +0000', '2025-01-01 00:00:22.500000 +0000',
                    '2025-01-01 00:00:15.000000 +0000',
                    [
                        '2025-01-01 00:00:08.000000 +0000',
                        '2025-01-01 00:00:12.000000 +0000',
                        '2025-01-01 00:00:16.000000 +0000',
                        '2025-01-01 00:00:20.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:00:22.500000 +0000', '2025-01-01 00:00:37.500000 +0000',
                    '2025-01-01 00:00:30.000000 +0000',
                    [
                        '2025-01-01 00:00:24.000000 +0000',
                        '2025-01-01 00:00:28.000000 +0000',
                        '2025-01-01 00:00:32.000000 +0000',
                        '2025-01-01 00:00:36.000000 +0000',
                    ]
                ),
            ))

        # Transition to PDT 2025-03-09
        t, = zip(*gen_seq(3, (20156 + 10/24 - 4*SECOND, 4*SECOND)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_15s, t, PT
            )),
            (
                (
                    '2025-03-09 01:59:52.500000 -0800', '2025-03-09 03:00:07.500000 -0700',
                    '2025-03-09 03:00:00.000000 -0700',
                    [
                        '2025-03-09 01:59:56.000000 -0800',
                        '2025-03-09 03:00:00.000000 -0700',
                        '2025-03-09 03:00:04.000000 -0700'
                    ]
                ),
            ))

        # Transition to PST 2025-11-02
        t, = zip(*gen_seq(3, (20394 + 9/24 - 4*SECOND, 4*SECOND)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_15s, t, PT
            )),
            (
                (
                    '2025-11-02 01:59:52.500000 -0700', '2025-11-02 01:00:07.500000 -0800',
                    '2025-11-02 01:00:00.000000 -0800',
                    [
                        '2025-11-02 01:59:56.000000 -0700',
                        '2025-11-02 01:00:00.000000 -0800',
                        '2025-11-02 01:00:04.000000 -0800'
                    ]
                ),
            ))

    def test_make_time_sequence_1m(self):
        """ The minute sequencer produces correct time buckets """

        # The time sequence starts at 0 minutes
        t, = zip(*gen_seq(8, (20089.0, 15*SECOND)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1m, t, UTC
            )),
            (
                (
                    '2024-12-31 23:59:30.000000 +0000', '2025-01-01 00:00:30.000000 +0000',
                    '2025-01-01 00:00:00.000000 +0000',
                    [
                        '2025-01-01 00:00:00.000000 +0000',
                        '2025-01-01 00:00:15.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:00:30.000000 +0000', '2025-01-01 00:01:30.000000 +0000',
                    '2025-01-01 00:01:00.000000 +0000',
                    [
                        '2025-01-01 00:00:30.000000 +0000',
                        '2025-01-01 00:00:45.000000 +0000',
                        '2025-01-01 00:01:00.000000 +0000',
                        '2025-01-01 00:01:15.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:01:30.000000 +0000', '2025-01-01 00:02:30.000000 +0000',
                    '2025-01-01 00:02:00.000000 +0000',
                    [
                        '2025-01-01 00:01:30.000000 +0000',
                        '2025-01-01 00:01:45.000000 +0000',
                    ]
                ),
            ))

        # The time sequence starts closer to the minute 1 than 0 (at 30 seconds)
        t, = zip(*gen_seq(8, (20089.0 + 30*SECOND, 15*SECOND)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1m, t, UTC
            )),
            (
                (
                    '2025-01-01 00:00:30.000000 +0000', '2025-01-01 00:01:30.000000 +0000',
                    '2025-01-01 00:01:00.000000 +0000',
                    [
                        '2025-01-01 00:00:30.000000 +0000',
                        '2025-01-01 00:00:45.000000 +0000',
                        '2025-01-01 00:01:00.000000 +0000',
                        '2025-01-01 00:01:15.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:01:30.000000 +0000', '2025-01-01 00:02:30.000000 +0000',
                    '2025-01-01 00:02:00.000000 +0000',
                    [
                        '2025-01-01 00:01:30.000000 +0000',
                        '2025-01-01 00:01:45.000000 +0000',
                        '2025-01-01 00:02:00.000000 +0000',
                        '2025-01-01 00:02:15.000000 +0000',
                    ]
                ),
            ))

        # Transition to PDT 2025-03-09
        t, = zip(*gen_seq(3, (20156 + 10/24 - 15*SECOND, 15*SECOND)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1m, t, PT
            )),
            (
                (
                    '2025-03-09 01:59:30.000000 -0800', '2025-03-09 03:00:30.000000 -0700',
                    '2025-03-09 03:00:00.000000 -0700',
                    [
                        '2025-03-09 01:59:45.000000 -0800',
                        '2025-03-09 03:00:00.000000 -0700',
                        '2025-03-09 03:00:15.000000 -0700'
                    ]
                ),
            ))

        # Transition to PST 2025-11-02
        t, = zip(*gen_seq(3, (20394 + 9/24 - 15*SECOND, 15*SECOND)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1m, t, PT
            )),
            (
                (
                    '2025-11-02 01:59:30.000000 -0700', '2025-11-02 01:00:30.000000 -0800',
                    '2025-11-02 01:00:00.000000 -0800',
                    [
                        '2025-11-02 01:59:45.000000 -0700',
                        '2025-11-02 01:00:00.000000 -0800',
                        '2025-11-02 01:00:15.000000 -0800'
                    ]
                ),
            ))

    def test_make_time_sequence_15m(self):
        """ The 15m sequencer produces correct time buckets """

        # The time sequence starts at 0 minutes
        t, = zip(*gen_seq(8, (20089.0, 4*MINUTE)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_15m, t, UTC
            )),
            (
                (
                    '2024-12-31 23:52:30.000000 +0000', '2025-01-01 00:07:30.000000 +0000',
                    '2025-01-01 00:00:00.000000 +0000',
                    [
                        '2025-01-01 00:00:00.000000 +0000',
                        '2025-01-01 00:04:00.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:07:30.000000 +0000', '2025-01-01 00:22:30.000000 +0000',
                    '2025-01-01 00:15:00.000000 +0000',
                    [
                        '2025-01-01 00:08:00.000000 +0000',
                        '2025-01-01 00:12:00.000000 +0000',
                        '2025-01-01 00:16:00.000000 +0000',
                        '2025-01-01 00:20:00.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:22:30.000000 +0000', '2025-01-01 00:37:30.000000 +0000',
                    '2025-01-01 00:30:00.000000 +0000',
                    [
                        '2025-01-01 00:24:00.000000 +0000',
                        '2025-01-01 00:28:00.000000 +0000',
                    ]
                ),
            ))

        # The time sequence starts closer to 15 minutes than 0 (at 8)
        t, = zip(*gen_seq(8, (20089.0 + 8*MINUTE, 4*MINUTE)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_15m, t, UTC
            )),
            (
                (
                    '2025-01-01 00:07:30.000000 +0000', '2025-01-01 00:22:30.000000 +0000',
                    '2025-01-01 00:15:00.000000 +0000',
                    [
                        '2025-01-01 00:08:00.000000 +0000',
                        '2025-01-01 00:12:00.000000 +0000',
                        '2025-01-01 00:16:00.000000 +0000',
                        '2025-01-01 00:20:00.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:22:30.000000 +0000', '2025-01-01 00:37:30.000000 +0000',
                    '2025-01-01 00:30:00.000000 +0000',
                    [
                        '2025-01-01 00:24:00.000000 +0000',
                        '2025-01-01 00:28:00.000000 +0000',
                        '2025-01-01 00:32:00.000000 +0000',
                        '2025-01-01 00:36:00.000000 +0000',
                    ]
                ),
            ))

        # Transition to PDT 2025-03-09
        t, = zip(*gen_seq(3, (20156 + 10/24 - 4*MINUTE, 4*MINUTE)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_15m, t, PT
            )),
            (
                (
                    '2025-03-09 01:52:30.000000 -0800', '2025-03-09 03:07:30.000000 -0700',
                    '2025-03-09 03:00:00.000000 -0700',
                    [
                        '2025-03-09 01:56:00.000000 -0800',
                        '2025-03-09 03:00:00.000000 -0700',
                        '2025-03-09 03:04:00.000000 -0700'
                    ]
                ),
            ))

        # Transition to PST 2025-11-02
        t, = zip(*gen_seq(3, (20394 + 9/24 - 4*MINUTE, 4*MINUTE)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_15m, t, PT
            )),
            (
                (
                    '2025-11-02 01:52:30.000000 -0700', '2025-11-02 01:07:30.000000 -0800',
                    '2025-11-02 01:00:00.000000 -0800',
                    [
                        '2025-11-02 01:56:00.000000 -0700',
                        '2025-11-02 01:00:00.000000 -0800',
                        '2025-11-02 01:04:00.000000 -0800'
                    ]
                ),
            ))

    def test_make_time_sequence_1h(self):
        """ The hour sequencer produces correct time buckets """

        # The time sequence starts at 0 hours
        t, = zip(*gen_seq(8, (20089.0, 15*MINUTE)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1h, t, UTC
            )),
            (
                (
                    '2024-12-31 23:30:00.000000 +0000', '2025-01-01 00:30:00.000000 +0000',
                    '2025-01-01 00:00:00.000000 +0000',
                    [
                        '2025-01-01 00:00:00.000000 +0000',
                        '2025-01-01 00:15:00.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 00:30:00.000000 +0000', '2025-01-01 01:30:00.000000 +0000',
                    '2025-01-01 01:00:00.000000 +0000',
                    [
                        '2025-01-01 00:30:00.000000 +0000',
                        '2025-01-01 00:45:00.000000 +0000',
                        '2025-01-01 01:00:00.000000 +0000',
                        '2025-01-01 01:15:00.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 01:30:00.000000 +0000', '2025-01-01 02:30:00.000000 +0000',
                    '2025-01-01 02:00:00.000000 +0000',
                    [
                        '2025-01-01 01:30:00.000000 +0000',
                        '2025-01-01 01:45:00.000000 +0000',
                    ]
                ),
            ))

        # The time sequence starts closer to the hour 1 than 0 (at 30 minutes)
        t, = zip(*gen_seq(8, (20089.0 + 30*MINUTE, 15*MINUTE)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1h, t, UTC
            )),
            (
                (
                    '2025-01-01 00:30:00.000000 +0000', '2025-01-01 01:30:00.000000 +0000',
                    '2025-01-01 01:00:00.000000 +0000',
                    [
                        '2025-01-01 00:30:00.000000 +0000',
                        '2025-01-01 00:45:00.000000 +0000',
                        '2025-01-01 01:00:00.000000 +0000',
                        '2025-01-01 01:15:00.000000 +0000',
                    ]
                ),
                (
                    '2025-01-01 01:30:00.000000 +0000', '2025-01-01 02:30:00.000000 +0000',
                    '2025-01-01 02:00:00.000000 +0000',
                    [
                        '2025-01-01 01:30:00.000000 +0000',
                        '2025-01-01 01:45:00.000000 +0000',
                        '2025-01-01 02:00:00.000000 +0000',
                        '2025-01-01 02:15:00.000000 +0000',
                    ]
                ),
            ))

        # Transition to PDT 2025-03-09
        t, = zip(*gen_seq(3, (20156 + 10/24 - 15*MINUTE, 15*MINUTE)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1h, t, PT
            )),
            (
                (
                    '2025-03-09 01:30:00.000000 -0800', '2025-03-09 03:30:00.000000 -0700',
                    '2025-03-09 03:00:00.000000 -0700',
                    [
                        '2025-03-09 01:45:00.000000 -0800',
                        '2025-03-09 03:00:00.000000 -0700',
                        '2025-03-09 03:15:00.000000 -0700'
                    ]
                ),
            ))

        # Transition to PST 2025-11-02
        t, = zip(*gen_seq(3, (20394 + 9/24 - 15*MINUTE, 15*MINUTE)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1h, t, PT
            )),
            (
                (
                    '2025-11-02 01:30:00.000000 -0700', '2025-11-02 01:30:00.000000 -0800',
                    '2025-11-02 01:00:00.000000 -0800',
                    [
                        '2025-11-02 01:45:00.000000 -0700',
                        '2025-11-02 01:00:00.000000 -0800',
                        '2025-11-02 01:15:00.000000 -0800'
                    ]
                ),
            ))

    def test_make_time_sequence_1d(self):
        """ The day sequencer produces correct time buckets """

        # The time sequence starts at midnight
        t, = zip(*gen_seq(8, (20089.0, 6*HOUR)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1d, t, UTC
            )),
            (
                (
                    '2025-01-01 00:00:00.000000 +0000', '2025-01-02 00:00:00.000000 +0000',
                    '2025-01-01 12:00:00.000000 +0000',
                    [
                        '2025-01-01 00:00:00.000000 +0000',
                        '2025-01-01 06:00:00.000000 +0000',
                        '2025-01-01 12:00:00.000000 +0000',
                        '2025-01-01 18:00:00.000000 +0000'
                    ]
                ),
                (
                    '2025-01-02 00:00:00.000000 +0000', '2025-01-03 00:00:00.000000 +0000',
                    '2025-01-02 12:00:00.000000 +0000',
                    [
                        '2025-01-02 00:00:00.000000 +0000',
                        '2025-01-02 06:00:00.000000 +0000',
                        '2025-01-02 12:00:00.000000 +0000',
                        '2025-01-02 18:00:00.000000 +0000'
                    ]
                ),
            ))

        # Transition to PDT 2025-03-09
        t, = zip(*gen_seq(3, (20156 + 10/24 - 2*HOUR, 2*HOUR)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1d, t, PT
            )),
            (
                (
                    '2025-03-09 00:00:00.000000 -0800', '2025-03-10 00:00:00.000000 -0700',
                    '2025-03-09 12:00:00.000000 -0700',
                    [
                        '2025-03-09 00:00:00.000000 -0800',
                        '2025-03-09 03:00:00.000000 -0700',
                        '2025-03-09 05:00:00.000000 -0700'
                    ]
                ),
            ))

        # Transition to PST 2025-11-02
        t, = zip(*gen_seq(3, (20394 + 9/24 - 2*HOUR, 2*HOUR)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1d, t, PT
            )),
            (
                (
                    '2025-11-02 00:00:00.000000 -0700', '2025-11-03 00:00:00.000000 -0800',
                    '2025-11-02 12:00:00.000000 -0800',
                    [
                        '2025-11-02 00:00:00.000000 -0700',
                        '2025-11-02 01:00:00.000000 -0800',
                        '2025-11-02 03:00:00.000000 -0800'
                    ]
                ),
            ))

    def test_make_time_sequence_1w(self):
        """ The week sequencer produces correct time buckets """

        # The time sequence starts Jan 1
        t, = zip(*gen_seq(9, (20089.0, 48*HOUR)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1w, t, UTC, '%Y-%m-%d'
            )),
            (
                (
                    '2024-12-30', '2025-01-06', '2024-12-30',
                    ['2025-01-01', '2025-01-03', '2025-01-05']
                ),
                (
                    '2025-01-06', '2025-01-13', '2025-01-06',
                    ['2025-01-07', '2025-01-09', '2025-01-11']
                ),
                (
                    '2025-01-13', '2025-01-20', '2025-01-13',
                    ['2025-01-13', '2025-01-15', '2025-01-17']
                ),
            ))

        # Whole year
        self.maxDiff = None
        t, = zip(*gen_seq(53, (20089.0 + 8/24, 168*HOUR)))
        self.assertEqual(tuple(distribute(
                i2cs_graph.sequencer.make_time_sequence_1w, t, PT, '%Y-%m-%d %z'
            )),
            (
                ('2024-12-30 -0800', '2025-01-06 -0800', '2024-12-30 -0800', ['2025-01-01 -0800']),
                ('2025-01-06 -0800', '2025-01-13 -0800', '2025-01-06 -0800', ['2025-01-08 -0800']),
                ('2025-01-13 -0800', '2025-01-20 -0800', '2025-01-13 -0800', ['2025-01-15 -0800']),
                ('2025-01-20 -0800', '2025-01-27 -0800', '2025-01-20 -0800', ['2025-01-22 -0800']),
                ('2025-01-27 -0800', '2025-02-03 -0800', '2025-01-27 -0800', ['2025-01-29 -0800']),
                ('2025-02-03 -0800', '2025-02-10 -0800', '2025-02-03 -0800', ['2025-02-05 -0800']),
                ('2025-02-10 -0800', '2025-02-17 -0800', '2025-02-10 -0800', ['2025-02-12 -0800']),
                ('2025-02-17 -0800', '2025-02-24 -0800', '2025-02-17 -0800', ['2025-02-19 -0800']),
                ('2025-02-24 -0800', '2025-03-03 -0800', '2025-02-24 -0800', ['2025-02-26 -0800']),
                ('2025-03-03 -0800', '2025-03-10 -0700', '2025-03-03 -0800', ['2025-03-05 -0800']),
                ('2025-03-10 -0700', '2025-03-17 -0700', '2025-03-10 -0700', ['2025-03-12 -0700']),
                ('2025-03-17 -0700', '2025-03-24 -0700', '2025-03-17 -0700', ['2025-03-19 -0700']),
                ('2025-03-24 -0700', '2025-03-31 -0700', '2025-03-24 -0700', ['2025-03-26 -0700']),
                ('2025-03-31 -0700', '2025-04-07 -0700', '2025-03-31 -0700', ['2025-04-02 -0700']),
                ('2025-04-07 -0700', '2025-04-14 -0700', '2025-04-07 -0700', ['2025-04-09 -0700']),
                ('2025-04-14 -0700', '2025-04-21 -0700', '2025-04-14 -0700', ['2025-04-16 -0700']),
                ('2025-04-21 -0700', '2025-04-28 -0700', '2025-04-21 -0700', ['2025-04-23 -0700']),
                ('2025-04-28 -0700', '2025-05-05 -0700', '2025-04-28 -0700', ['2025-04-30 -0700']),
                ('2025-05-05 -0700', '2025-05-12 -0700', '2025-05-05 -0700', ['2025-05-07 -0700']),
                ('2025-05-12 -0700', '2025-05-19 -0700', '2025-05-12 -0700', ['2025-05-14 -0700']),
                ('2025-05-19 -0700', '2025-05-26 -0700', '2025-05-19 -0700', ['2025-05-21 -0700']),
                ('2025-05-26 -0700', '2025-06-02 -0700', '2025-05-26 -0700', ['2025-05-28 -0700']),
                ('2025-06-02 -0700', '2025-06-09 -0700', '2025-06-02 -0700', ['2025-06-04 -0700']),
                ('2025-06-09 -0700', '2025-06-16 -0700', '2025-06-09 -0700', ['2025-06-11 -0700']),
                ('2025-06-16 -0700', '2025-06-23 -0700', '2025-06-16 -0700', ['2025-06-18 -0700']),
                ('2025-06-23 -0700', '2025-06-30 -0700', '2025-06-23 -0700', ['2025-06-25 -0700']),
                ('2025-06-30 -0700', '2025-07-07 -0700', '2025-06-30 -0700', ['2025-07-02 -0700']),
                ('2025-07-07 -0700', '2025-07-14 -0700', '2025-07-07 -0700', ['2025-07-09 -0700']),
                ('2025-07-14 -0700', '2025-07-21 -0700', '2025-07-14 -0700', ['2025-07-16 -0700']),
                ('2025-07-21 -0700', '2025-07-28 -0700', '2025-07-21 -0700', ['2025-07-23 -0700']),
                ('2025-07-28 -0700', '2025-08-04 -0700', '2025-07-28 -0700', ['2025-07-30 -0700']),
                ('2025-08-04 -0700', '2025-08-11 -0700', '2025-08-04 -0700', ['2025-08-06 -0700']),
                ('2025-08-11 -0700', '2025-08-18 -0700', '2025-08-11 -0700', ['2025-08-13 -0700']),
                ('2025-08-18 -0700', '2025-08-25 -0700', '2025-08-18 -0700', ['2025-08-20 -0700']),
                ('2025-08-25 -0700', '2025-09-01 -0700', '2025-08-25 -0700', ['2025-08-27 -0700']),
                ('2025-09-01 -0700', '2025-09-08 -0700', '2025-09-01 -0700', ['2025-09-03 -0700']),
                ('2025-09-08 -0700', '2025-09-15 -0700', '2025-09-08 -0700', ['2025-09-10 -0700']),
                ('2025-09-15 -0700', '2025-09-22 -0700', '2025-09-15 -0700', ['2025-09-17 -0700']),
                ('2025-09-22 -0700', '2025-09-29 -0700', '2025-09-22 -0700', ['2025-09-24 -0700']),
                ('2025-09-29 -0700', '2025-10-06 -0700', '2025-09-29 -0700', ['2025-10-01 -0700']),
                ('2025-10-06 -0700', '2025-10-13 -0700', '2025-10-06 -0700', ['2025-10-08 -0700']),
                ('2025-10-13 -0700', '2025-10-20 -0700', '2025-10-13 -0700', ['2025-10-15 -0700']),
                ('2025-10-20 -0700', '2025-10-27 -0700', '2025-10-20 -0700', ['2025-10-22 -0700']),
                ('2025-10-27 -0700', '2025-11-03 -0800', '2025-10-27 -0700', ['2025-10-29 -0700']),
                ('2025-11-03 -0800', '2025-11-10 -0800', '2025-11-03 -0800', ['2025-11-05 -0800']),
                ('2025-11-10 -0800', '2025-11-17 -0800', '2025-11-10 -0800', ['2025-11-12 -0800']),
                ('2025-11-17 -0800', '2025-11-24 -0800', '2025-11-17 -0800', ['2025-11-19 -0800']),
                ('2025-11-24 -0800', '2025-12-01 -0800', '2025-11-24 -0800', ['2025-11-26 -0800']),
                ('2025-12-01 -0800', '2025-12-08 -0800', '2025-12-01 -0800', ['2025-12-03 -0800']),
                ('2025-12-08 -0800', '2025-12-15 -0800', '2025-12-08 -0800', ['2025-12-10 -0800']),
                ('2025-12-15 -0800', '2025-12-22 -0800', '2025-12-15 -0800', ['2025-12-17 -0800']),
                ('2025-12-22 -0800', '2025-12-29 -0800', '2025-12-22 -0800', ['2025-12-24 -0800']),
                ('2025-12-29 -0800', '2026-01-05 -0800', '2025-12-29 -0800', ['2025-12-31 -0800']),
            ))

if __name__ == '__main__':
    unittest.main()
